{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/departments`;\nexport let DepartmentService = /*#__PURE__*/(() => {\n  class DepartmentService {\n    constructor(\n    // private router: Router,\n    http) {\n      this.http = http;\n      this.departmentSubject = new BehaviorSubject(null);\n      this.department = this.departmentSubject.asObservable();\n    }\n    get departmentValue() {\n      return this.departmentSubject.value;\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(department => {\n        // if(department.id === this.departmentValue.id){\n        //   department = { ...this.departmentValue, ...department}\n        this.departmentSubject.next(department);\n        // }\n        return department;\n      }));\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`);\n    }\n    static #_ = this.ɵfac = function DepartmentService_Factory(t) {\n      return new (t || DepartmentService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DepartmentService,\n      factory: DepartmentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DepartmentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}